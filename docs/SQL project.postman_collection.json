{
	"info": {
		"_postman_id": "1061cebd-ff03-4038-9948-af8160edf6ad",
		"name": "SQL project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36726123"
	},
	"item": [
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Juan\",\r\n    \"email\":\"Juan@gmail.com\",\r\n    \"password\":\"1234535\",\r\n    \"id\":\"32489239\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3010/register",
					"host": [
						"localhost"
					],
					"port": "3010",
					"path": [
						"register"
					]
				},
				"description": "\n### Register User\n\nThis endpoint allows you to register a new user.\n\n#### Request Body\n- `name` (string, required): The name of the user.\n- `email` (string, required): The email of the user.\n- `password` (string, required): The password for the user.\n- `id` (string, required): The unique identifier for the user.\n\n#### Response\nUpon successful registration, the server responds with a status code of 200 and a content type of text/html. The response body contains the details of the newly created user, including their name, email, and unique identifier.\n\nExample response:\n```\nUsuario creado: Nombre Juan, Email: Juan@gmail.com, Id: 123987\n```\n"
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 12345,\r\n    \"password\":\"1234578\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3010/login",
					"host": [
						"localhost"
					],
					"port": "3010",
					"path": [
						"login"
					]
				},
				"description": "### Login Endpoint\n\nThis endpoint is used to authenticate and login the user.\n\n#### Request Body\n\n- `id` (number) - The user ID.\n    \n- `password` (string) - The user's password.\n    \n\n#### Response\n\nUpon successful authentication, the server responds with a status code of 200 and a content type of text/html, along with the message \"sesion iniciada\" indicating that the session has been successfully initiated."
			},
			"response": []
		},
		{
			"name": "Post/update/delete tasks/Containers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\":\"task\",\r\n    \"name\":\"Tarea 1\",\r\n    \"id_container\": \"5\",\r\n    \"id\":\"3\",\r\n    \"procedure\":\"update\",\r\n    \"description\":\"hola\",\r\n    \"status\":1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3010/tasks",
					"host": [
						"localhost"
					],
					"port": "3010",
					"path": [
						"tasks"
					]
				},
				"description": "### POST /tasks\n\nThis endpoint is used to create a new task.\n\n#### Request Body\n\n- `type` (string, required): The type of the task.\n    \n- `name` (string, required): The name of the task.\n    \n- `id_container` (string, required): The ID of the container for the task.\n    \n- `id` (string, required): The ID of the task.\n    \n- `procedure` (string, required): The procedure for the task.\n    \n- `description` (string, required): The description of the task.\n    \n- `status` (integer, required): The status of the task.\n    \n\n#### Response\n\nThe response for this request is in XML format.\n\n#### JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"responseProperty1\": {\n            \"type\": \"string\"\n        },\n        \"responseProperty2\": {\n            \"type\": \"integer\"\n        }\n    }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(task) {",
							"        pm.expect(task).to.have.property('id_task');",
							"        pm.expect(task).to.have.property('task_name');",
							"        pm.expect(task).to.have.property('status');",
							"        pm.expect(task).to.have.property('container');",
							"        pm.expect(task).to.have.property('user_id');",
							"        pm.expect(task).to.have.property('description');",
							"        pm.expect(task).to.have.property('id_container');",
							"        pm.expect(task).to.have.property('name');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Task_name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(task) {",
							"    pm.expect(task.task_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Task_name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"User_id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(task) {",
							"        pm.expect(task.user_id).to.be.a('number');",
							"        pm.expect(task.user_id).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Container is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.container).to.be.a('number');",
							"    pm.expect(item.container).to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3010/tasks",
					"host": [
						"localhost"
					],
					"port": "3010",
					"path": [
						"tasks"
					]
				},
				"description": "### GET /tasks\n\nThis endpoint retrieves a list of tasks.\n\n#### Request\n\nThere are no request parameters for this endpoint.\n\n#### Response\n\nThe response will be a JSON array containing task objects with the following properties:\n\n- `id_task` (number): The ID of the task.\n    \n- `task_name` (string): The name of the task.\n    \n- `status` (string): The status of the task.\n    \n- `container` (number): The container ID associated with the task.\n    \n- `user_id` (number): The ID of the user associated with the task.\n    \n- `description` (string): The description of the task.\n    \n- `id_container` (number): The ID of the container associated with the task.\n    \n- `name` (string): The name associated with the task.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id_task\": 0,\n        \"task_name\": \"\",\n        \"status\": \"\",\n        \"container\": 0,\n        \"user_id\": 0,\n        \"description\": null,\n        \"id_container\": 0,\n        \"name\": \"\"\n    }\n]\n\n ```"
			},
			"response": []
		}
	]
}